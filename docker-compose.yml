version: '3.8'

services:
  nexus:
    image: sonatype/nexus3:3.76.0
    container_name: nexus
    ports:
      - "8092:8081"
    volumes:
      - nexus_data:/nexus-data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/service/rest/v1/status"]
      interval: 5s
      timeout: 10s
      retries: 30
    networks:
      - application-network

  nexus-change-password:
    image: appropriate/curl
    container_name: nexus-change-password
    environment:
      - NEXUS_ADMIN_PASSWORD_FILE=/nexus-data/admin.password
      - NEXUS_NEW_PASSWORD=admin
    depends_on:
      nexus:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/scripts/change-password.sh"]
    volumes:
      - nexus_data:/nexus-data
      - ./nexus:/scripts:ro
    networks:
      - application-network

  individuals-api:
    container_name: individuals-api
    build:
      context: ./modules/individuals-api
      dockerfile: Dockerfile
      args:
        ARTIFACTORY_URL: http://host.docker.internal:8092/repository/maven-snapshots/
        ARTIFACTORY_USER: admin
        ARTIFACTORY_PASSWORD: admin
    environment:
      OTEL_SERVICE_NAME: person-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    ports:
      - "8080:8080"
    volumes:
      - individuals_api_gradle_cache:/home/gradle/.gradle
    depends_on:
      person-service:
        condition: service_healthy
      transaction-service:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - application-network

  person-service:
    container_name: person-service
    build:
      context: ./modules/person-service
      dockerfile: Dockerfile
      args:
        ARTIFACTORY_URL: http://host.docker.internal:8092/repository/maven-snapshots/
        ARTIFACTORY_USER: admin
        ARTIFACTORY_PASSWORD: admin
    environment:
      OTEL_SERVICE_NAME: person-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    volumes:
      - person_service_gradle_cache:/home/gradle/.gradle
    depends_on:
      kafka:
        condition: service_started
      person-service-postgres:
        condition: service_healthy
      alloy:
        condition: service_started
    ports:
      - "8082:8082"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - application-network

  transaction-service:
    container_name: transaction-service
    build:
      context: ./modules/transaction-service
      dockerfile: Dockerfile
      args:
        ARTIFACTORY_URL: http://host.docker.internal:8092/repository/maven-snapshots/
        ARTIFACTORY_USER: admin
        ARTIFACTORY_PASSWORD: admin
    environment:
      SHARDS_CONFIG_PATH: config/sharding_config.json
      OTEL_SERVICE_NAME: transaction-service
      OTEL_EXPORTER_OTLP_ENDPOINT: http://alloy:4318
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_METRICS_EXPORTER: none
      OTEL_TRACES_EXPORTER: otlp
      OTEL_LOGS_EXPORTER: none
      OTEL_RESOURCE_ATTRIBUTES: service.version=1.0.0,deployment.environment=docker
    volumes:
      - transaction_service_gradle_cache:/home/gradle/.gradle
      - ./config/transaction_service_sharding_config.json:/app/config/sharding_config.json:ro
    depends_on:
      transaction-service-migration:
        condition: service_completed_successfully
      kafka:
        condition: service_started
      alloy:
        condition: service_started
    ports:
      - "8083:8083"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - application-network

  transaction-service-migration:
    container_name: transaction-service-migration
    build:
      context: ./modules/transaction-service/migration
      dockerfile: Dockerfile
    volumes:
      # Монтируем миграции из transaction-service
      - ./modules/transaction-service/src/main/resources/db/migration:/app/db/migration:ro
      # Монтируем файл конфигурации шардинга
      - ./config/transaction_service_sharding_config.json:/app/config/sharding_config.json:ro
    environment:
      # Указываем путь до файла в контейнере
      - SHARDS_CONFIG_PATH=config/sharding_config.json
    depends_on:
      transaction-service-postgres-0:
        condition: service_healthy
      transaction-service-postgres-1:
        condition: service_healthy
    networks:
      - application-network

  kafka-contracts:
    container_name: kafka-contracts-publish
    build:
      context: ./modules/kafka-contracts
    environment:
      ARTIFACTORY_URL: http://nexus:8081/repository/maven-snapshots/
      ARTIFACTORY_USER: admin
      ARTIFACTORY_PASSWORD: admin
    networks:
      - application-network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    networks:
      - application-network

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:7.5.3
    ports:
      - "8086:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9093
    depends_on:
      - kafka
    networks:
      - application-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9093,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9093,EXTERNAL://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - application-network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.3.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: [ "CMD-SHELL", "echo srvr | nc 127.0.0.1 2181 | grep Mode" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - application-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: keycloak
    ports:
      - "8081:8081"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://keycloak-postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=password
      - KC_HTTP_PORT=8081
      - KC_HTTPS_PORT=8443
      - KC_HEALTH_ENABLED=true
      - KEYCLOAK_IMPORT=/opt/keycloak/data/import/my-realm-realm.json
    command: start-dev --import-realm
    volumes:
      - keycloak_data:/opt/keycloak/data
      - ./modules/individuals-api/keycloak/import:/opt/keycloak/data/import
    depends_on:
      keycloak-postgres:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:9000/health/live' ]
      interval: 10s
      timeout: 10s
      retries: 6
    networks:
      - application-network

  keycloak-postgres:
    container_name: keycloak-postgres
    image: postgres:17.5-alpine
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - application-network

  person-service-postgres:
    container_name: person-service-postgres
    image: postgres:17.4
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=db
      - POSTGRES_USER=person-service
      - POSTGRES_PASSWORD=password
    volumes:
      - person_service_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U person-service -d db" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - application-network

  transaction-service-postgres-0:
    container_name: transaction-service-postgres-0
    image: postgres:17.4
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=transaction_db_0
      - POSTGRES_USER=transaction-service
      - POSTGRES_PASSWORD=password
    volumes:
      - transaction_service_postgres_0_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U transaction-service -d transaction_db_0" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - application-network

  transaction-service-postgres-1:
    container_name: transaction-service-postgres-1
    image: postgres:17.4
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_DB=transaction_db_1
      - POSTGRES_USER=transaction-service
      - POSTGRES_PASSWORD=password
    volumes:
      - transaction_service_postgres_1_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U transaction-service -d transaction_db_1" ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - application-network

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    user: root
    ports:
      - "9080:9080"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - application-network


  loki:
    image: grafana/loki:2.9.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yml
    user: "root"
    volumes:
      - ./loki-config.yml:/etc/loki/loki-config.yml:ro
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3100/ready" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - application-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.54.1
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/prometheus
    depends_on:
      alloy:
        condition: service_started
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - application-network

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: [ "-config.file=/etc/tempo/tempo.yml" ]
    volumes:
      - ./tempo-config.yml:/etc/tempo/tempo.yml
      - tempo_data:/var/tempo
    depends_on:
      create-tempo-bucket:
        condition: service_completed_successfully
    ports:
      - "3200:3200"
    networks:
      - application-network

  minio:
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: tempo
      MINIO_ROOT_PASSWORD: tempo-tempo
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - application-network

  create-tempo-bucket:
    image: minio/mc
    container_name: create-tempo-bucket
    entrypoint: >
      /bin/sh -c "
        sleep 10 && \
        mc alias set minio http://minio:9000 tempo tempo-tempo && \
        mc mb -p minio/tempo && \
        mc anonymous set download minio/tempo
      "
    depends_on:
      - minio
    networks:
      - application-network

  grafana:
    container_name: grafana
    image: grafana/grafana:11.2.0
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - loki
      - prometheus
      - tempo
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - application-network

networks:
  application-network:
    driver: bridge

volumes:
  transaction_service_postgres_0_data:
    driver: local
  transaction_service_postgres_1_data:
    driver: local
  transaction_service_gradle_cache:
    driver: local
  person_service_gradle_cache:
    driver: local
  individuals_api_gradle_cache:
    driver: local
  tempo_data:
    driver: local
  person_service_postgres_data:
    driver: local
  grafana_data:
    driver: local
  keycloak_postgres_data:
    driver: local
  keycloak_data:
    driver: local
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules:
  minio_data:
  nexus_data: