@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
LAYOUT_TOP_DOWN()

Person(user, "Пользователь")

System_Boundary(financehub, "Finance Hub") {

  Container(individuals_api, "individuals-api", "Spring Boot", "API-шлюз. Обрабатывает регистрацию, логин, проксирует запросы к person- и transaction-сервисам. Интеграция с Keycloak. SAGA-оркестрация.")

  Container(person_service, "person-service", "Spring Boot", "CRUD персональных данных. Работает с PostgreSQL.")

  Container(transaction_service, "transaction-service", "Spring Boot", "Обработка транзакций и CRUD кошельков. Работает с PostgreSQL. Интеграция с Kafka.")

  ContainerDb(person_db, "PostgreSQL (person)", "БД персональных данных")
  ContainerDb(transaction_db_0, "PostgreSQL (transaction_0)", "БД транзакций и кошельков, шард 1")
  ContainerDb(transaction_db_1, "PostgreSQL (transaction_1)", "БД транзакций и кошельков, шард 2")

  Container(alloy, "Alloy", "OTel", "Сбор логов и трейсингов от всех сервисов")

  Container(kafka, "Kafka", "Apache Kafka", "Брокер сообщений: публикация и подписка")
}

System_Ext(keycloak, "Keycloak", "Аутентификация (OIDC)")
System_Ext(prometheus, "Prometheus", "Сбор метрик")
System_Ext(grafana, "Grafana", "Визуализация метрик, логов и трейсингов")
System_Ext(tempo, "Tempo", "Трассировки")
System_Ext(minio, "Minio", "Хранилище для Tempo")
System_Ext(loki, "Loki", "Хранение логов")
System_Ext(schema_registry, "Schema Registry", "Confluent Schema Registry")


' Взаимодействие
Rel(user, individuals_api, "HTTP-запросы (логин, регистрация, CRUD, транзакции)")
Rel(individuals_api, keycloak, "Аутентификация / Авторизация", "OIDC")
Rel(individuals_api, person_service, "Проксирует запросы", "REST")
Rel(individuals_api, transaction_service, "Проксирует запросы", "REST")

Rel(person_service, person_db, "Чтение и запись", "JDBC")
Rel(transaction_service, transaction_db_0, "Чтение и запись", "JDBC")
Rel(transaction_service, transaction_db_1, "Чтение и запись", "JDBC")

Rel(tempo, minio, "Чтение и запись", "S3 API")

Rel(individuals_api, alloy, "Логи, трассировки", "OTLP")
Rel(person_service, alloy, "Логи, трассировки", "OTLP")
Rel(transaction_service, alloy, "Логи, трассировки", "OTLP")

Rel(transaction_service, kafka, "Публикует и читает сообщения", "Kafka protocol")
Rel(transaction_service, schema_registry, "Регистрация и получение схем", "REST / Avro")

Rel(prometheus, individuals_api, "Scrap metrics")
Rel(prometheus, person_service, "Scrap metrics")
Rel(prometheus, transaction_service, "Scrap metrics")

Rel(alloy, tempo, "Трассировки")
Rel(alloy, loki, "Логи")

Rel(grafana, prometheus, "Метрики")
Rel(grafana, tempo, "Трассировки")
Rel(grafana, loki, "Логи")
@enduml